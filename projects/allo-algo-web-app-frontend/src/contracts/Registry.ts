/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "getProfileById(byte[])(byte[],uint256,string,string,address,uint64,address[])": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "Profile",
          "elements": [
            [
              "id",
              "byte[]"
            ],
            [
              "nonce",
              "uint256"
            ],
            [
              "name",
              "string"
            ],
            [
              "metadata",
              "string"
            ],
            [
              "owner",
              "address"
            ],
            [
              "anchor",
              "uint64"
            ],
            [
              "members",
              "address[]"
            ]
          ]
        }
      }
    },
    "getProfileByAnchor(uint64)(byte[],uint256,string,string,address,uint64,address[])": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "Profile",
          "elements": [
            [
              "id",
              "byte[]"
            ],
            [
              "nonce",
              "uint256"
            ],
            [
              "name",
              "string"
            ],
            [
              "metadata",
              "string"
            ],
            [
              "owner",
              "address"
            ],
            [
              "anchor",
              "uint64"
            ],
            [
              "members",
              "address[]"
            ]
          ]
        }
      }
    },
    "createProfile(uint256,string,string)byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addMember(byte[],address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateProfileName(byte[],string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateProfileMetadata(byte[],string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "isOwnerOrMemberOfProfile(byte[],address)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMucmVnaXN0cnkuY29udHJhY3QuUmVnaXN0cnkuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "version": {
          "type": "bytes",
          "key": "version"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "Registry",
    "methods": [
      {
        "name": "getProfileById",
        "args": [
          {
            "type": "byte[]",
            "name": "id"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "(byte[],uint256,string,string,address,uint64,address[])"
        }
      },
      {
        "name": "getProfileByAnchor",
        "args": [
          {
            "type": "uint64",
            "name": "anchor"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "(byte[],uint256,string,string,address,uint64,address[])"
        }
      },
      {
        "name": "createProfile",
        "args": [
          {
            "type": "uint256",
            "name": "nonce"
          },
          {
            "type": "string",
            "name": "name"
          },
          {
            "type": "string",
            "name": "metadata"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "byte[]"
        }
      },
      {
        "name": "addMember",
        "args": [
          {
            "type": "byte[]",
            "name": "profileId"
          },
          {
            "type": "address",
            "name": "member"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateProfileName",
        "args": [
          {
            "type": "byte[]",
            "name": "profileId"
          },
          {
            "type": "string",
            "name": "name"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateProfileMetadata",
        "args": [
          {
            "type": "byte[]",
            "name": "profileId"
          },
          {
            "type": "string",
            "name": "metadata"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "isOwnerOrMemberOfProfile",
        "args": [
          {
            "type": "byte[]",
            "name": "profileId"
          },
          {
            "type": "address",
            "name": "address"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "bool"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the Registry smart contract.
 */
export type Registry = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'getProfileById(byte[])(byte[],uint256,string,string,address,uint64,address[])' | 'getProfileById', {
      argsObj: {
        id: Uint8Array
      }
      argsTuple: [id: Uint8Array]
      returns: Profile
    }>
    & Record<'getProfileByAnchor(uint64)(byte[],uint256,string,string,address,uint64,address[])' | 'getProfileByAnchor', {
      argsObj: {
        anchor: bigint | number
      }
      argsTuple: [anchor: bigint | number]
      returns: Profile
    }>
    & Record<'createProfile(uint256,string,string)byte[]' | 'createProfile', {
      argsObj: {
        nonce: bigint | number
        name: string
        metadata: string
      }
      argsTuple: [nonce: bigint | number, name: string, metadata: string]
      returns: Uint8Array
    }>
    & Record<'addMember(byte[],address)void' | 'addMember', {
      argsObj: {
        profileId: Uint8Array
        member: string
      }
      argsTuple: [profileId: Uint8Array, member: string]
      returns: void
    }>
    & Record<'updateProfileName(byte[],string)void' | 'updateProfileName', {
      argsObj: {
        profileId: Uint8Array
        name: string
      }
      argsTuple: [profileId: Uint8Array, name: string]
      returns: void
    }>
    & Record<'updateProfileMetadata(byte[],string)void' | 'updateProfileMetadata', {
      argsObj: {
        profileId: Uint8Array
        metadata: string
      }
      argsTuple: [profileId: Uint8Array, metadata: string]
      returns: void
    }>
    & Record<'isOwnerOrMemberOfProfile(byte[],address)bool' | 'isOwnerOrMemberOfProfile', {
      argsObj: {
        profileId: Uint8Array
        address: string
      }
      argsTuple: [profileId: Uint8Array, address: string]
      returns: boolean
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      version?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type RegistrySig = keyof Registry['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends RegistrySig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Represents a Profile result as a struct
 */
export type Profile = {
  id: Uint8Array
  nonce: bigint
  name: string
  metadata: string
  owner: string
  anchor: bigint
  members: string[]
}
/**
 * Converts the tuple representation of a Profile to the struct representation
 */
export function Profile([id, nonce, name, metadata, owner, anchor, members]: [Uint8Array, bigint, string, string, string, bigint, string[]] ) {
  return {
    id,
    nonce,
    name,
    metadata,
    owner,
    anchor,
    members,
  }
}
/**
 * Maps a method signature from the Registry smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends RegistrySig> = Registry['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Registry smart contract to the method's return type
 */
export type MethodReturn<TSignature extends RegistrySig> = Registry['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type RegistryCreateCalls = (typeof RegistryCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type RegistryCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type RegistryDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: RegistryCreateCalls) => RegistryCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class RegistryCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Registry smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the getProfileById(byte[])(byte[],uint256,string,string,address,uint64,address[]) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getProfileById(args: MethodArgs<'getProfileById(byte[])(byte[],uint256,string,string,address,uint64,address[])'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getProfileById(byte[])(byte[],uint256,string,string,address,uint64,address[])' as const,
      methodArgs: Array.isArray(args) ? args : [args.id],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getProfileByAnchor(uint64)(byte[],uint256,string,string,address,uint64,address[]) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getProfileByAnchor(args: MethodArgs<'getProfileByAnchor(uint64)(byte[],uint256,string,string,address,uint64,address[])'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getProfileByAnchor(uint64)(byte[],uint256,string,string,address,uint64,address[])' as const,
      methodArgs: Array.isArray(args) ? args : [args.anchor],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the createProfile(uint256,string,string)byte[] ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createProfile(args: MethodArgs<'createProfile(uint256,string,string)byte[]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createProfile(uint256,string,string)byte[]' as const,
      methodArgs: Array.isArray(args) ? args : [args.nonce, args.name, args.metadata],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addMember(byte[],address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addMember(args: MethodArgs<'addMember(byte[],address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addMember(byte[],address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.profileId, args.member],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updateProfileName(byte[],string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateProfileName(args: MethodArgs<'updateProfileName(byte[],string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updateProfileName(byte[],string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.profileId, args.name],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updateProfileMetadata(byte[],string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateProfileMetadata(args: MethodArgs<'updateProfileMetadata(byte[],string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updateProfileMetadata(byte[],string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.profileId, args.metadata],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the isOwnerOrMemberOfProfile(byte[],address)bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static isOwnerOrMemberOfProfile(args: MethodArgs<'isOwnerOrMemberOfProfile(byte[],address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'isOwnerOrMemberOfProfile(byte[],address)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.profileId, args.address],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Registry smart contract
 */
export class RegistryClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `RegistryClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Registry['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Registry smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: RegistryDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(RegistryCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Registry smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Registry smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the getProfileById(byte[])(byte[],uint256,string,string,address,uint64,address[]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getProfileById(args: MethodArgs<'getProfileById(byte[])(byte[],uint256,string,string,address,uint64,address[])'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(RegistryCallFactory.getProfileById(args, params), Profile)
  }

  /**
   * Calls the getProfileByAnchor(uint64)(byte[],uint256,string,string,address,uint64,address[]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getProfileByAnchor(args: MethodArgs<'getProfileByAnchor(uint64)(byte[],uint256,string,string,address,uint64,address[])'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(RegistryCallFactory.getProfileByAnchor(args, params), Profile)
  }

  /**
   * Calls the createProfile(uint256,string,string)byte[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createProfile(args: MethodArgs<'createProfile(uint256,string,string)byte[]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(RegistryCallFactory.createProfile(args, params))
  }

  /**
   * Calls the addMember(byte[],address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addMember(args: MethodArgs<'addMember(byte[],address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(RegistryCallFactory.addMember(args, params))
  }

  /**
   * Calls the updateProfileName(byte[],string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateProfileName(args: MethodArgs<'updateProfileName(byte[],string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(RegistryCallFactory.updateProfileName(args, params))
  }

  /**
   * Calls the updateProfileMetadata(byte[],string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateProfileMetadata(args: MethodArgs<'updateProfileMetadata(byte[],string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(RegistryCallFactory.updateProfileMetadata(args, params))
  }

  /**
   * Calls the isOwnerOrMemberOfProfile(byte[],address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public isOwnerOrMemberOfProfile(args: MethodArgs<'isOwnerOrMemberOfProfile(byte[],address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(RegistryCallFactory.isOwnerOrMemberOfProfile(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Registry['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get version() {
        return RegistryClient.getBinaryState(state, 'version')
      },
    }
  }

  public compose(): RegistryComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      getProfileById(args: MethodArgs<'getProfileById(byte[])(byte[],uint256,string,string,address,uint64,address[])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getProfileById(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Profile)
        return this
      },
      getProfileByAnchor(args: MethodArgs<'getProfileByAnchor(uint64)(byte[],uint256,string,string,address,uint64,address[])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getProfileByAnchor(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Profile)
        return this
      },
      createProfile(args: MethodArgs<'createProfile(uint256,string,string)byte[]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createProfile(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addMember(args: MethodArgs<'addMember(byte[],address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addMember(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateProfileName(args: MethodArgs<'updateProfileName(byte[],string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateProfileName(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateProfileMetadata(args: MethodArgs<'updateProfileMetadata(byte[],string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateProfileMetadata(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      isOwnerOrMemberOfProfile(args: MethodArgs<'isOwnerOrMemberOfProfile(byte[],address)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.isOwnerOrMemberOfProfile(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as RegistryComposer
  }
}
export type RegistryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the getProfileById(byte[])(byte[],uint256,string,string,address,uint64,address[]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProfileById(args: MethodArgs<'getProfileById(byte[])(byte[],uint256,string,string,address,uint64,address[])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): RegistryComposer<[...TReturns, MethodReturn<'getProfileById(byte[])(byte[],uint256,string,string,address,uint64,address[])'>]>

  /**
   * Calls the getProfileByAnchor(uint64)(byte[],uint256,string,string,address,uint64,address[]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProfileByAnchor(args: MethodArgs<'getProfileByAnchor(uint64)(byte[],uint256,string,string,address,uint64,address[])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): RegistryComposer<[...TReturns, MethodReturn<'getProfileByAnchor(uint64)(byte[],uint256,string,string,address,uint64,address[])'>]>

  /**
   * Calls the createProfile(uint256,string,string)byte[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createProfile(args: MethodArgs<'createProfile(uint256,string,string)byte[]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): RegistryComposer<[...TReturns, MethodReturn<'createProfile(uint256,string,string)byte[]'>]>

  /**
   * Calls the addMember(byte[],address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addMember(args: MethodArgs<'addMember(byte[],address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): RegistryComposer<[...TReturns, MethodReturn<'addMember(byte[],address)void'>]>

  /**
   * Calls the updateProfileName(byte[],string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateProfileName(args: MethodArgs<'updateProfileName(byte[],string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): RegistryComposer<[...TReturns, MethodReturn<'updateProfileName(byte[],string)void'>]>

  /**
   * Calls the updateProfileMetadata(byte[],string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateProfileMetadata(args: MethodArgs<'updateProfileMetadata(byte[],string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): RegistryComposer<[...TReturns, MethodReturn<'updateProfileMetadata(byte[],string)void'>]>

  /**
   * Calls the isOwnerOrMemberOfProfile(byte[],address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isOwnerOrMemberOfProfile(args: MethodArgs<'isOwnerOrMemberOfProfile(byte[],address)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): RegistryComposer<[...TReturns, MethodReturn<'isOwnerOrMemberOfProfile(byte[],address)bool'>]>

  /**
   * Makes a clear_state call to an existing instance of the Registry smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): RegistryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): RegistryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<RegistryComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<RegistryComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type RegistryComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type RegistryComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
