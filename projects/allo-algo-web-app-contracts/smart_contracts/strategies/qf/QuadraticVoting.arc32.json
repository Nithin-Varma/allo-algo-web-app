{
    "hints": {
        "initialize()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "createProposal(string,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "allocateCredits(address[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "vote(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getProposalVotes(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuc3RyYXRlZ2llcy5xZi5jb250cmFjdC5RdWFkcmF0aWNWb3RpbmcuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 3
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "isActive": {
                    "type": "uint64",
                    "key": "isActive"
                },
                "proposal_id_incrementer": {
                    "type": "uint64",
                    "key": "proposal_id_incrementer"
                },
                "totalFunds": {
                    "type": "uint64",
                    "key": "totalFunds"
                },
                "voters": {
                    "type": "bytes",
                    "key": "voters"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "QuadraticVoting",
        "methods": [
            {
                "name": "initialize",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "createProposal",
                "args": [
                    {
                        "type": "string",
                        "name": "_proposalTitle"
                    },
                    {
                        "type": "string",
                        "name": "_proposalDescription"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "allocateCredits",
                "args": [
                    {
                        "type": "address[]",
                        "name": "_voters"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "vote",
                "args": [
                    {
                        "type": "uint64",
                        "name": "_proposalId"
                    },
                    {
                        "type": "uint64",
                        "name": "_credits"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "getProposalVotes",
                "args": [
                    {
                        "type": "uint64",
                        "name": "_proposalId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}