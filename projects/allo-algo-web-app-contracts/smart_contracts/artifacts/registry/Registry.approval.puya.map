{
  "version": 3,
  "sources": [
    "../../registry/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;;;AACQ;;;;;;;;;;;;AAAA;;AAFR;;;AAAA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAQK;;AAAA;AAAA;AAAA;;AAAA;AARL;;;AAAA;AAAA;;AAQK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;AAAA;AAAA;AAAA;;AAAA;AAdL;;;AAAA;AAAA;;AAcK;;;AAAA;AAAA;AAOA;;AAAA;AAAA;AAAA;;AAAA;AArBL;;;AAAA;;;AAqBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;AAAA;AAAA;AAAA;;AAAA;AAxBL;;;AAAA;AAwBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;AAAA;AAAA;AAAA;;AAAA;AA3BL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AA2BK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;AAAA;AAAA;AAAA;;AAAA;AA/BL;;;AAAA;AAAA;;;AAAA;;;AA+BK;;;AAAA;AAAA;AAMA;;AAAA;AAAA;AAAA;;AAAA;AArCL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAqCK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;;AAAA;AAAA;AAAA;;AAAA;AAvDL;;;AAAA;;;AAAA;;;AAuDK;;;AAAA;AAAA;AAMA;;AAAA;AAAA;AAAA;;AAAA;AA7DL;;;AAAA;;;AAAA;;;AA6DK;;;AAAA;AAAA;AAMA;;AAAA;AAAA;AAAA;;AAAA;AAnEL;;;AAAA;;;AAAA;;;AAmEK;;;AAAA;AAAA;AAMA;;AAAA;AAAA;AAAA;;AAAA;AAzEL;;;AAAA;;;AAAA;;;AAyEK;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAzEL;;AAAA;;;;;;;;;AAAA;AAAA;AAQA;;;AAEgB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAER;AAER;;;AAEsB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACtB;;;AACkC;;AAAQ;AAAR;AAAtB;AAAA;;;;AAEsB;AAAtB;AAAA;;AACZ;;;AAEkC;AAAA;;AAAA;AAAA;AAAA;AAA1B;AACR;;;AAEoD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAA1B;AACR;;;AAE8B;;AAA6B;;AAA7B;AAAjB;AACL;AACR;;;AAEuB;AAAA;;AAAA;AAAA;AAAA;AAER;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAP;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AACR;;;AAEsC;;AAArB;;;AACK;AAAA;;;AAAA;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAA4B;;;;;AAA5B;AAAA;;AAGH;AAAA;AAGwB;;AACA;;AAAA;AANxB;;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAOG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAPH;AAUV;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAEA;AAET;;;AAE+C;AAAA;;AAAA;AAAA;AAAA;AAAA;AACvC;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AACA;;AAAA;;AAAA;;AAER;;;AAEQ;;AAAA;;;AAC6B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC7B;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AACA;;AAAA;;AAAA;;AAkBR;;;AAEqC;AAAA;;AAAA;AAAA;AAAA;AACtB;;;AAAiB;;AAAjB;AAAP;;AApBR;;;AAEQ;;AAAA;;;AAC6B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC7B;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AACA;;AAAA;;AAAA;;AACR;;;;;AAE+C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAC7B;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AACC;AAAX;AACR;AAAA;;AAAA;;AAAA;;AAAA;;;;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AACe;;AAAA;AAAf;;;AAC2B;;;AACX;;;;;;;;;;;;;;AAED;;AAAA;;;AAAA;;AAAA;AAAA;AAAP;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.registry.contract.Registry.approval_program",
      "params": {},
      "block": "smart_contracts.registry.contract.Registry.approval_program",
      "stack_in": [],
      "op": "intcblock 1 0 54 32"
    },
    "7": {
      "op": "bytecblock \"profilesById\" 0x151f7c75 \"nonce\" \"anchorToProfileId\""
    },
    "51": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "53": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "56": {
      "callsub": "smart_contracts.registry.contract.Registry.__init__",
      "op": "callsub __init__"
    },
    "59": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "smart_contracts.registry.contract.Registry.__puya_arc4_router__",
      "op": "callsub __puya_arc4_router__",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "62": {
      "op": "return",
      "stack_out": []
    },
    "63": {
      "subroutine": "smart_contracts.registry.contract.Registry.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "66": {
      "op": "pushbytess \"version\" 0x01 // \"version\", 0x01",
      "defined_out": [
        "\"version\"",
        "0x01"
      ],
      "stack_out": [
        "\"version\"",
        "0x01"
      ]
    },
    "78": {
      "op": "app_global_put",
      "stack_out": []
    },
    "79": {
      "retsub": true,
      "op": "retsub"
    },
    "80": {
      "subroutine": "smart_contracts.registry.contract.Registry.__puya_arc4_router__",
      "params": {},
      "block": "__puya_arc4_router__",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "83": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "85": {
      "op": "bz __puya_arc4_router___bare_routing@15",
      "stack_out": []
    },
    "88": {
      "op": "pushbytess 0x586e076e 0x3fbb5f60 0x4171c371 0x76e4e7a8 0xaa8d1fa2 0xd7941b2c 0x83ec693f 0x4f74e9f7 0xddb61658 0x41fcc955 0xab552ca5 // method \"getAccountNonce(account)uint64\", method \"incrementAccountNonce(account)void\", method \"getProfileById(byte[])(byte[],uint64,string,string,address,uint64,address[])\", method \"getProfileByAnchor(uint64)(byte[],uint64,string,string,address,uint64,address[])\", method \"getProfileId(uint256,string,string)byte[]\", method \"addAnchorToProfileId(uint64,byte[])void\", method \"createProfile(byte[],string,string)uint64\", method \"addMember(byte[],address)void\", method \"updateProfileName(byte[],string)void\", method \"updateProfileMetadata(byte[],string)void\", method \"isOwnerOrMemberOfProfile(byte[],address)bool\""
    },
    "145": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(addAnchorToProfileId(uint64,byte[])void)",
        "Method(addMember(byte[],address)void)",
        "Method(createProfile(byte[],string,string)uint64)",
        "Method(getAccountNonce(account)uint64)",
        "Method(getProfileByAnchor(uint64)(byte[],uint64,string,string,address,uint64,address[]))",
        "Method(getProfileById(byte[])(byte[],uint64,string,string,address,uint64,address[]))",
        "Method(getProfileId(uint256,string,string)byte[])",
        "Method(incrementAccountNonce(account)void)",
        "Method(isOwnerOrMemberOfProfile(byte[],address)bool)",
        "Method(updateProfileMetadata(byte[],string)void)",
        "Method(updateProfileName(byte[],string)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(getAccountNonce(account)uint64)",
        "Method(incrementAccountNonce(account)void)",
        "Method(getProfileById(byte[])(byte[],uint64,string,string,address,uint64,address[]))",
        "Method(getProfileByAnchor(uint64)(byte[],uint64,string,string,address,uint64,address[]))",
        "Method(getProfileId(uint256,string,string)byte[])",
        "Method(addAnchorToProfileId(uint64,byte[])void)",
        "Method(createProfile(byte[],string,string)uint64)",
        "Method(addMember(byte[],address)void)",
        "Method(updateProfileName(byte[],string)void)",
        "Method(updateProfileMetadata(byte[],string)void)",
        "Method(isOwnerOrMemberOfProfile(byte[],address)bool)",
        "tmp%2#0"
      ]
    },
    "148": {
      "op": "match __puya_arc4_router___getAccountNonce_route@2 __puya_arc4_router___incrementAccountNonce_route@3 __puya_arc4_router___getProfileById_route@4 __puya_arc4_router___getProfileByAnchor_route@5 __puya_arc4_router___getProfileId_route@6 __puya_arc4_router___addAnchorToProfileId_route@7 __puya_arc4_router___createProfile_route@8 __puya_arc4_router___addMember_route@9 __puya_arc4_router___updateProfileName_route@10 __puya_arc4_router___updateProfileMetadata_route@11 __puya_arc4_router___isOwnerOrMemberOfProfile_route@12",
      "stack_out": []
    },
    "172": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "173": {
      "retsub": true,
      "op": "retsub"
    },
    "174": {
      "block": "__puya_arc4_router___getAccountNonce_route@2",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "176": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "177": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "178": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "180": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "181": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "184": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "185": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "187": {
      "callsub": "smart_contracts.registry.contract.Registry.getAccountNonce",
      "op": "callsub getAccountNonce",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "190": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "191": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "192": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "193": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "194": {
      "op": "log",
      "stack_out": []
    },
    "195": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "196": {
      "retsub": true,
      "op": "retsub"
    },
    "197": {
      "block": "__puya_arc4_router___incrementAccountNonce_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "199": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "200": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "201": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "203": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "204": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "207": {
      "op": "btoi",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "208": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "210": {
      "callsub": "smart_contracts.registry.contract.Registry.incrementAccountNonce",
      "op": "callsub incrementAccountNonce",
      "stack_out": []
    },
    "213": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "214": {
      "retsub": true,
      "op": "retsub"
    },
    "215": {
      "block": "__puya_arc4_router___getProfileById_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "217": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "218": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "219": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "221": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "222": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "225": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "228": {
      "callsub": "smart_contracts.registry.contract.Registry.getProfileById",
      "op": "callsub getProfileById",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "231": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "0x151f7c75"
      ]
    },
    "232": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%24#0"
      ]
    },
    "233": {
      "op": "concat",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "234": {
      "op": "log",
      "stack_out": []
    },
    "235": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "236": {
      "retsub": true,
      "op": "retsub"
    },
    "237": {
      "block": "__puya_arc4_router___getProfileByAnchor_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "239": {
      "op": "!",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "240": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "241": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "243": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "244": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "247": {
      "op": "btoi",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "248": {
      "callsub": "smart_contracts.registry.contract.Registry.getProfileByAnchor",
      "op": "callsub getProfileByAnchor",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "251": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "0x151f7c75"
      ]
    },
    "252": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%32#0"
      ]
    },
    "253": {
      "op": "concat",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "254": {
      "op": "log",
      "stack_out": []
    },
    "255": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "256": {
      "retsub": true,
      "op": "retsub"
    },
    "257": {
      "block": "__puya_arc4_router___getProfileId_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "259": {
      "op": "!",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "260": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "261": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "263": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "264": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "267": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%39#0"
      ]
    },
    "270": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%38#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%40#0"
      ]
    },
    "273": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%38#0",
        "tmp%40#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%40#0",
        "tmp%41#0"
      ]
    },
    "276": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%38#0",
        "tmp%40#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%40#0",
        "tmp%42#0"
      ]
    },
    "279": {
      "callsub": "smart_contracts.registry.contract.Registry.getProfileId",
      "op": "callsub getProfileId",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "282": {
      "op": "dup",
      "defined_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "283": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length%0#0"
      ]
    },
    "284": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "as_bytes%0#0"
      ]
    },
    "285": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length_uint16%0#0"
      ]
    },
    "288": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%1#0"
      ]
    },
    "289": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "290": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "291": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "292": {
      "op": "concat",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "293": {
      "op": "log",
      "stack_out": []
    },
    "294": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "295": {
      "retsub": true,
      "op": "retsub"
    },
    "296": {
      "block": "__puya_arc4_router___addAnchorToProfileId_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "298": {
      "op": "!",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "299": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "300": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "302": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "303": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "306": {
      "op": "btoi",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "307": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%49#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "tmp%50#0"
      ]
    },
    "310": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%49#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "tmp%51#0"
      ]
    },
    "313": {
      "callsub": "smart_contracts.registry.contract.Registry.addAnchorToProfileId",
      "op": "callsub addAnchorToProfileId",
      "stack_out": []
    },
    "316": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "317": {
      "retsub": true,
      "op": "retsub"
    },
    "318": {
      "block": "__puya_arc4_router___createProfile_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "320": {
      "op": "!",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "321": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "322": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "324": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "325": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "328": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "331": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%57#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%57#0",
        "tmp%58#0"
      ]
    },
    "334": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%57#0",
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%57#0",
        "tmp%59#0"
      ]
    },
    "337": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%57#0",
        "tmp%59#0",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%57#0",
        "tmp%59#0",
        "tmp%60#0"
      ]
    },
    "340": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%57#0",
        "tmp%59#0",
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%57#0",
        "tmp%59#0",
        "tmp%61#0"
      ]
    },
    "343": {
      "callsub": "smart_contracts.registry.contract.Registry.createProfile",
      "op": "callsub createProfile",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "346": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "347": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "348": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "349": {
      "op": "concat",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "350": {
      "op": "log",
      "stack_out": []
    },
    "351": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "352": {
      "retsub": true,
      "op": "retsub"
    },
    "353": {
      "block": "__puya_arc4_router___addMember_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "355": {
      "op": "!",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "356": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "357": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "359": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "360": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "363": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "366": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%68#0",
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "tmp%69#0"
      ]
    },
    "369": {
      "callsub": "smart_contracts.registry.contract.Registry.addMember",
      "op": "callsub addMember",
      "stack_out": []
    },
    "372": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "373": {
      "retsub": true,
      "op": "retsub"
    },
    "374": {
      "block": "__puya_arc4_router___updateProfileName_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "376": {
      "op": "!",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "377": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "378": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "380": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "381": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "384": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "387": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%75#0",
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%76#0"
      ]
    },
    "390": {
      "callsub": "smart_contracts.registry.contract.Registry.updateProfileName",
      "op": "callsub updateProfileName",
      "stack_out": []
    },
    "393": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "394": {
      "retsub": true,
      "op": "retsub"
    },
    "395": {
      "block": "__puya_arc4_router___updateProfileMetadata_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "397": {
      "op": "!",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "398": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "399": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "401": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "402": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "405": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "408": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%82#0",
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%82#0",
        "tmp%83#0"
      ]
    },
    "411": {
      "callsub": "smart_contracts.registry.contract.Registry.updateProfileMetadata",
      "op": "callsub updateProfileMetadata",
      "stack_out": []
    },
    "414": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "415": {
      "retsub": true,
      "op": "retsub"
    },
    "416": {
      "block": "__puya_arc4_router___isOwnerOrMemberOfProfile_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "418": {
      "op": "!",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "419": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "420": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "422": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "423": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "426": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "429": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%89#0",
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%89#0",
        "tmp%90#0"
      ]
    },
    "432": {
      "callsub": "smart_contracts.registry.contract.Registry.isOwnerOrMemberOfProfile",
      "op": "callsub isOwnerOrMemberOfProfile",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "435": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "0x00"
      ]
    },
    "438": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "0x00",
        "0"
      ]
    },
    "439": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%3#0"
      ]
    },
    "441": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "442": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "443": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "444": {
      "op": "concat",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "445": {
      "op": "log",
      "stack_out": []
    },
    "446": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "447": {
      "retsub": true,
      "op": "retsub"
    },
    "448": {
      "block": "__puya_arc4_router___bare_routing@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "450": {
      "op": "bnz __puya_arc4_router___after_if_else@19",
      "stack_out": []
    },
    "453": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "455": {
      "op": "!",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "456": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "457": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "458": {
      "retsub": true,
      "op": "retsub"
    },
    "459": {
      "block": "__puya_arc4_router___after_if_else@19",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "460": {
      "retsub": true,
      "op": "retsub"
    },
    "461": {
      "subroutine": "smart_contracts.registry.contract.Registry.getAccountNonce",
      "params": {
        "account#0": "bytes"
      },
      "block": "getAccountNonce",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "464": {
      "op": "bytec_2 // \"nonce\"",
      "defined_out": [
        "\"nonce\""
      ],
      "stack_out": [
        "\"nonce\""
      ]
    },
    "465": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"nonce\"",
        "account#0 (copy)"
      ],
      "stack_out": [
        "\"nonce\"",
        "account#0 (copy)"
      ]
    },
    "467": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "468": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "469": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "470": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%0#0",
        "value#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "value#0"
      ]
    },
    "471": {
      "op": "swap",
      "stack_out": [
        "value#0",
        "maybe_exists%0#0"
      ]
    },
    "472": {
      "error": "check self.nonce entry exists",
      "op": "assert // check self.nonce entry exists",
      "stack_out": [
        "value#0"
      ]
    },
    "473": {
      "retsub": true,
      "op": "retsub"
    },
    "474": {
      "subroutine": "smart_contracts.registry.contract.Registry.incrementAccountNonce",
      "params": {
        "account#0": "bytes"
      },
      "block": "incrementAccountNonce",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "477": {
      "op": "bytec_2 // \"nonce\"",
      "defined_out": [
        "\"nonce\""
      ],
      "stack_out": [
        "\"nonce\""
      ]
    },
    "478": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"nonce\"",
        "account#0 (copy)"
      ],
      "stack_out": [
        "\"nonce\"",
        "account#0 (copy)"
      ]
    },
    "480": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "481": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "482": {
      "op": "box_get",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0",
        "valid#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "valid#0"
      ]
    },
    "483": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "valid#0",
        "maybe_value%0#0"
      ]
    },
    "484": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "valid#0",
        "value#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "valid#0",
        "value#0"
      ]
    },
    "485": {
      "op": "cover 2",
      "defined_out": [
        "tmp%0#0",
        "valid#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%0#0",
        "valid#0"
      ]
    },
    "487": {
      "op": "bz incrementAccountNonce_else_body@2",
      "stack_out": [
        "value#0",
        "tmp%0#0"
      ]
    },
    "490": {
      "op": "frame_dig 0",
      "stack_out": [
        "value#0",
        "tmp%0#0",
        "value#0"
      ]
    },
    "492": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%0#0",
        "value#0",
        "1"
      ]
    },
    "493": {
      "op": "+",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%0#0",
        "new_box_value%0#0"
      ]
    },
    "494": {
      "op": "itob",
      "defined_out": [
        "new_box_value%1#0",
        "tmp%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%0#0",
        "new_box_value%1#0"
      ]
    },
    "495": {
      "op": "box_put",
      "stack_out": [
        "value#0"
      ]
    },
    "496": {
      "op": "b incrementAccountNonce_after_if_else@3"
    },
    "499": {
      "block": "incrementAccountNonce_else_body@2",
      "stack_in": [
        "value#0",
        "tmp%0#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "value#0",
        "tmp%0#0",
        "1"
      ]
    },
    "500": {
      "op": "itob",
      "defined_out": [
        "new_box_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%0#0",
        "new_box_value%2#0"
      ]
    },
    "501": {
      "op": "box_put",
      "stack_out": [
        "value#0"
      ]
    },
    "502": {
      "block": "incrementAccountNonce_after_if_else@3",
      "stack_in": [
        "value#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "503": {
      "subroutine": "smart_contracts.registry.contract.Registry.getProfileById",
      "params": {
        "id#0": "bytes"
      },
      "block": "getProfileById",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "506": {
      "op": "bytec_0 // \"profilesById\"",
      "defined_out": [
        "\"profilesById\""
      ],
      "stack_out": [
        "\"profilesById\""
      ]
    },
    "507": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"profilesById\"",
        "id#0 (copy)"
      ],
      "stack_out": [
        "\"profilesById\"",
        "id#0 (copy)"
      ]
    },
    "509": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "510": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "511": {
      "error": "check self.profilesById entry exists",
      "op": "assert // check self.profilesById entry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "512": {
      "retsub": true,
      "op": "retsub"
    },
    "513": {
      "subroutine": "smart_contracts.registry.contract.Registry.getProfileByAnchor",
      "params": {
        "anchor#0": "uint64"
      },
      "block": "getProfileByAnchor",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "516": {
      "op": "frame_dig -1",
      "defined_out": [
        "anchor#0 (copy)"
      ],
      "stack_out": [
        "anchor#0 (copy)"
      ]
    },
    "518": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "519": {
      "op": "bytec_3 // \"anchorToProfileId\"",
      "defined_out": [
        "\"anchorToProfileId\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"anchorToProfileId\""
      ]
    },
    "520": {
      "op": "swap",
      "stack_out": [
        "\"anchorToProfileId\"",
        "tmp%0#0"
      ]
    },
    "521": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "522": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "523": {
      "error": "check self.anchorToProfileId entry exists",
      "op": "assert // check self.anchorToProfileId entry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "524": {
      "op": "bytec_0 // \"profilesById\"",
      "defined_out": [
        "\"profilesById\"",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "\"profilesById\""
      ]
    },
    "525": {
      "op": "swap",
      "stack_out": [
        "\"profilesById\"",
        "maybe_value%0#0"
      ]
    },
    "526": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "527": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "528": {
      "error": "check self.profilesById entry exists",
      "op": "assert // check self.profilesById entry exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "529": {
      "retsub": true,
      "op": "retsub"
    },
    "530": {
      "subroutine": "smart_contracts.registry.contract.Registry.getProfileId",
      "params": {
        "nonce#0": "bytes",
        "name#0": "bytes",
        "metadata#0": "bytes"
      },
      "block": "getProfileId",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "533": {
      "op": "frame_dig -3"
    },
    "535": {
      "op": "txn Sender",
      "defined_out": [
        "nonce#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "nonce#0 (copy)",
        "tmp%0#0"
      ]
    },
    "537": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "538": {
      "op": "sha256",
      "defined_out": [
        "id#0"
      ],
      "stack_out": [
        "id#0"
      ]
    },
    "539": {
      "retsub": true,
      "op": "retsub"
    },
    "540": {
      "subroutine": "smart_contracts.registry.contract.Registry.addAnchorToProfileId",
      "params": {
        "anchor#0": "uint64",
        "profileId#0": "bytes"
      },
      "block": "addAnchorToProfileId",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "543": {
      "op": "bytec_0 // \"profilesById\"",
      "defined_out": [
        "\"profilesById\""
      ],
      "stack_out": [
        "\"profilesById\""
      ]
    },
    "544": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"profilesById\"",
        "profileId#0 (copy)"
      ],
      "stack_out": [
        "\"profilesById\"",
        "profileId#0 (copy)"
      ]
    },
    "546": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "547": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "profileBytes#0"
      ],
      "stack_out": [
        "profileBytes#0",
        "maybe_exists%0#0"
      ]
    },
    "548": {
      "error": "check self.profilesById entry exists",
      "op": "assert // check self.profilesById entry exists",
      "stack_out": [
        "profileBytes#0"
      ]
    },
    "549": {
      "op": "extract 46 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0"
      ]
    },
    "552": {
      "op": "frame_dig -2",
      "defined_out": [
        "anchor#0 (copy)",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "anchor#0 (copy)"
      ]
    },
    "554": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "tmp%1#0"
      ]
    },
    "555": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "556": {
      "op": "dig 1",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "reinterpret_biguint%0#0",
        "tmp%1#0 (copy)"
      ]
    },
    "558": {
      "op": "b==",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "559": {
      "error": "Profile has a different anchor",
      "op": "assert // Profile has a different anchor",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "560": {
      "op": "bytec_3 // \"anchorToProfileId\"",
      "defined_out": [
        "\"anchorToProfileId\"",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "\"anchorToProfileId\""
      ]
    },
    "561": {
      "op": "swap",
      "stack_out": [
        "\"anchorToProfileId\"",
        "tmp%1#0"
      ]
    },
    "562": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "563": {
      "op": "dup",
      "defined_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "564": {
      "op": "box_del",
      "defined_out": [
        "tmp%4#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%4#0",
        "{box_del}"
      ]
    },
    "565": {
      "op": "pop",
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "566": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%4#0",
        "profileId#0 (copy)"
      ]
    },
    "568": {
      "op": "box_put",
      "stack_out": []
    },
    "569": {
      "retsub": true,
      "op": "retsub"
    },
    "570": {
      "subroutine": "smart_contracts.registry.contract.Registry.createProfile",
      "params": {
        "id#0": "bytes",
        "name#0": "bytes",
        "metadata#0": "bytes"
      },
      "block": "createProfile",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "573": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "575": {
      "callsub": "smart_contracts.registry.contract.Registry.getAccountNonce",
      "op": "callsub getAccountNonce",
      "defined_out": [
        "nonce#0"
      ],
      "stack_out": [
        "nonce#0"
      ]
    },
    "578": {
      "op": "itxn_begin"
    },
    "579": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "nonce#0"
      ],
      "stack_out": [
        "nonce#0",
        "1"
      ]
    },
    "580": {
      "op": "itxn_field GlobalNumByteSlice",
      "stack_out": [
        "nonce#0"
      ]
    },
    "582": {
      "op": "pushbytes base64(CoEBQw==)",
      "defined_out": [
        "CoEBQw==",
        "nonce#0"
      ],
      "stack_out": [
        "nonce#0",
        "CoEBQw=="
      ]
    },
    "588": {
      "op": "itxn_field ClearStateProgramPages",
      "stack_out": [
        "nonce#0"
      ]
    },
    "590": {
      "op": "pushbytes base64(CiAEAQDoBwQmAQVvd25lcjEYQAADiAAEiAAJQ4oAACgyA2eJigABMRtBAJqCBQSFSlGNBNfnR4EEO9fOLAQP2ZhwBCgmsgI2GgCOBQACABQALABCAF4jiTEZFEQxGEQ2GgEXwByIAGsiiTEZFEQxGEQ2GgEXwBw2GgIXwDKIAGMiiTEZFEQxGEQ2GgEXwBw2GgIXiABuIokxGRREMRhENhoBF8AcNhoCF8AwNhoDF4gAdSKJMRkURDEYRDYaARfAMIgAfiKJMRlAAAYxGBREIokjiYoBACMoZUQyAxJEKIv/Z4mKAgAjKGVEMgMSRCiL/mexMgAishmL/7IYgQayELIBs4mKAgCIABGxi/+yCIv+sgcishAksgGziYoAACMoZUQxABJEiYoDAIj/7rGL/7ISi/6yEYv9shQlshAksgGziYoBAIj/07ExACOyEov/shGyFCWyECSyAbOJ)",
      "defined_out": [
        "CiAEAQDoBwQmAQVvd25lcjEYQAADiAAEiAAJQ4oAACgyA2eJigABMRtBAJqCBQSFSlGNBNfnR4EEO9fOLAQP2ZhwBCgmsgI2GgCOBQACABQALABCAF4jiTEZFEQxGEQ2GgEXwByIAGsiiTEZFEQxGEQ2GgEXwBw2GgIXwDKIAGMiiTEZFEQxGEQ2GgEXwBw2GgIXiABuIokxGRREMRhENhoBF8AcNhoCF8AwNhoDF4gAdSKJMRkURDEYRDYaARfAMIgAfiKJMRlAAAYxGBREIokjiYoBACMoZUQyAxJEKIv/Z4mKAgAjKGVEMgMSRCiL/mexMgAishmL/7IYgQayELIBs4mKAgCIABGxi/+yCIv+sgcishAksgGziYoAACMoZUQxABJEiYoDAIj/7rGL/7ISi/6yEYv9shQlshAksgGziYoBAIj/07ExACOyEov/shGyFCWyECSyAbOJ",
        "nonce#0"
      ],
      "stack_out": [
        "nonce#0",
        "CiAEAQDoBwQmAQVvd25lcjEYQAADiAAEiAAJQ4oAACgyA2eJigABMRtBAJqCBQSFSlGNBNfnR4EEO9fOLAQP2ZhwBCgmsgI2GgCOBQACABQALABCAF4jiTEZFEQxGEQ2GgEXwByIAGsiiTEZFEQxGEQ2GgEXwBw2GgIXwDKIAGMiiTEZFEQxGEQ2GgEXwBw2GgIXiABuIokxGRREMRhENhoBF8AcNhoCF8AwNhoDF4gAdSKJMRkURDEYRDYaARfAMIgAfiKJMRlAAAYxGBREIokjiYoBACMoZUQyAxJEKIv/Z4mKAgAjKGVEMgMSRCiL/mexMgAishmL/7IYgQayELIBs4mKAgCIABGxi/+yCIv+sgcishAksgGziYoAACMoZUQxABJEiYoDAIj/7rGL/7ISi/6yEYv9shQlshAksgGziYoBAIj/07ExACOyEov/shGyFCWyECSyAbOJ"
      ]
    },
    "941": {
      "op": "itxn_field ApprovalProgramPages",
      "stack_out": [
        "nonce#0"
      ]
    },
    "943": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "nonce#0"
      ],
      "stack_out": [
        "nonce#0",
        "appl"
      ]
    },
    "945": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "nonce#0"
      ]
    },
    "947": {
      "op": "pushint 2000 // 2000",
      "defined_out": [
        "2000",
        "nonce#0"
      ],
      "stack_out": [
        "nonce#0",
        "2000"
      ]
    },
    "950": {
      "op": "itxn_field Fee",
      "stack_out": [
        "nonce#0"
      ]
    },
    "952": {
      "op": "itxn_submit"
    },
    "953": {
      "op": "itxn CreatedApplicationID",
      "defined_out": [
        "anchor_app#0",
        "nonce#0"
      ],
      "stack_out": [
        "nonce#0",
        "anchor_app#0"
      ]
    },
    "955": {
      "op": "swap",
      "stack_out": [
        "anchor_app#0",
        "nonce#0"
      ]
    },
    "956": {
      "op": "itob",
      "defined_out": [
        "anchor_app#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "val_as_bytes%0#0"
      ]
    },
    "957": {
      "op": "txn Sender",
      "defined_out": [
        "anchor_app#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "val_as_bytes%0#0",
        "tmp%1#0"
      ]
    },
    "959": {
      "op": "dig 2",
      "defined_out": [
        "anchor_app#0",
        "anchor_app#0 (copy)",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "val_as_bytes%0#0",
        "tmp%1#0",
        "anchor_app#0 (copy)"
      ]
    },
    "961": {
      "op": "itob",
      "defined_out": [
        "anchor_app#0",
        "tmp%1#0",
        "tmp%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "val_as_bytes%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "962": {
      "op": "frame_dig -3",
      "defined_out": [
        "anchor_app#0",
        "id#0 (copy)",
        "tmp%1#0",
        "tmp%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "val_as_bytes%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "id#0 (copy)"
      ]
    },
    "964": {
      "op": "len",
      "defined_out": [
        "anchor_app#0",
        "data_length%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "val_as_bytes%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "data_length%0#0"
      ]
    },
    "965": {
      "op": "pushint 56 // 56",
      "defined_out": [
        "56",
        "anchor_app#0",
        "data_length%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "val_as_bytes%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "data_length%0#0",
        "56"
      ]
    },
    "967": {
      "op": "+",
      "defined_out": [
        "anchor_app#0",
        "current_tail_offset%1#0",
        "tmp%1#0",
        "tmp%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "val_as_bytes%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "current_tail_offset%1#0"
      ]
    },
    "968": {
      "op": "pushbytes 0x0038",
      "defined_out": [
        "0x0038",
        "anchor_app#0",
        "current_tail_offset%1#0",
        "tmp%1#0",
        "tmp%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "val_as_bytes%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "current_tail_offset%1#0",
        "0x0038"
      ]
    },
    "972": {
      "op": "uncover 4",
      "stack_out": [
        "anchor_app#0",
        "tmp%1#0",
        "tmp%2#0",
        "current_tail_offset%1#0",
        "0x0038",
        "val_as_bytes%0#0"
      ]
    },
    "974": {
      "op": "concat",
      "defined_out": [
        "anchor_app#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "tmp%1#0",
        "tmp%2#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "975": {
      "op": "dig 1",
      "defined_out": [
        "anchor_app#0",
        "current_tail_offset%1#0",
        "current_tail_offset%1#0 (copy)",
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "tmp%1#0",
        "tmp%2#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%1#0 (copy)"
      ]
    },
    "977": {
      "op": "itob",
      "defined_out": [
        "anchor_app#0",
        "as_bytes%1#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "tmp%1#0",
        "tmp%2#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "as_bytes%1#0"
      ]
    },
    "978": {
      "op": "extract 6 2",
      "defined_out": [
        "anchor_app#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "offset_as_uint16%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "tmp%1#0",
        "tmp%2#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "offset_as_uint16%1#0"
      ]
    },
    "981": {
      "op": "concat",
      "defined_out": [
        "anchor_app#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%3#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "tmp%1#0",
        "tmp%2#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "982": {
      "op": "frame_dig -2",
      "defined_out": [
        "anchor_app#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%3#0",
        "name#0 (copy)",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "tmp%1#0",
        "tmp%2#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%3#0",
        "name#0 (copy)"
      ]
    },
    "984": {
      "op": "len",
      "defined_out": [
        "anchor_app#0",
        "current_tail_offset%1#0",
        "data_length%1#0",
        "encoded_tuple_buffer%3#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "tmp%1#0",
        "tmp%2#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%3#0",
        "data_length%1#0"
      ]
    },
    "985": {
      "op": "uncover 2",
      "stack_out": [
        "anchor_app#0",
        "tmp%1#0",
        "tmp%2#0",
        "encoded_tuple_buffer%3#0",
        "data_length%1#0",
        "current_tail_offset%1#0"
      ]
    },
    "987": {
      "op": "+",
      "defined_out": [
        "anchor_app#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%3#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "tmp%1#0",
        "tmp%2#0",
        "encoded_tuple_buffer%3#0",
        "current_tail_offset%2#0"
      ]
    },
    "988": {
      "op": "dup",
      "defined_out": [
        "anchor_app#0",
        "current_tail_offset%2#0",
        "current_tail_offset%2#0 (copy)",
        "encoded_tuple_buffer%3#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "tmp%1#0",
        "tmp%2#0",
        "encoded_tuple_buffer%3#0",
        "current_tail_offset%2#0",
        "current_tail_offset%2#0 (copy)"
      ]
    },
    "989": {
      "op": "itob",
      "defined_out": [
        "anchor_app#0",
        "as_bytes%2#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%3#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "tmp%1#0",
        "tmp%2#0",
        "encoded_tuple_buffer%3#0",
        "current_tail_offset%2#0",
        "as_bytes%2#0"
      ]
    },
    "990": {
      "op": "extract 6 2",
      "defined_out": [
        "anchor_app#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%3#0",
        "offset_as_uint16%2#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "tmp%1#0",
        "tmp%2#0",
        "encoded_tuple_buffer%3#0",
        "current_tail_offset%2#0",
        "offset_as_uint16%2#0"
      ]
    },
    "993": {
      "op": "uncover 2",
      "stack_out": [
        "anchor_app#0",
        "tmp%1#0",
        "tmp%2#0",
        "current_tail_offset%2#0",
        "offset_as_uint16%2#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "995": {
      "op": "swap",
      "stack_out": [
        "anchor_app#0",
        "tmp%1#0",
        "tmp%2#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%3#0",
        "offset_as_uint16%2#0"
      ]
    },
    "996": {
      "op": "concat",
      "defined_out": [
        "anchor_app#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%4#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "tmp%1#0",
        "tmp%2#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "997": {
      "op": "frame_dig -1",
      "defined_out": [
        "anchor_app#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%4#0",
        "metadata#0 (copy)",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "tmp%1#0",
        "tmp%2#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%4#0",
        "metadata#0 (copy)"
      ]
    },
    "999": {
      "op": "len",
      "defined_out": [
        "anchor_app#0",
        "current_tail_offset%2#0",
        "data_length%2#0",
        "encoded_tuple_buffer%4#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "tmp%1#0",
        "tmp%2#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%4#0",
        "data_length%2#0"
      ]
    },
    "1000": {
      "op": "uncover 2",
      "stack_out": [
        "anchor_app#0",
        "tmp%1#0",
        "tmp%2#0",
        "encoded_tuple_buffer%4#0",
        "data_length%2#0",
        "current_tail_offset%2#0"
      ]
    },
    "1002": {
      "op": "+",
      "defined_out": [
        "anchor_app#0",
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%4#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "tmp%1#0",
        "tmp%2#0",
        "encoded_tuple_buffer%4#0",
        "current_tail_offset%3#0"
      ]
    },
    "1003": {
      "op": "swap",
      "stack_out": [
        "anchor_app#0",
        "tmp%1#0",
        "tmp%2#0",
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1004": {
      "op": "uncover 3",
      "stack_out": [
        "anchor_app#0",
        "tmp%2#0",
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%4#0",
        "tmp%1#0"
      ]
    },
    "1006": {
      "op": "concat",
      "defined_out": [
        "anchor_app#0",
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%5#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "tmp%2#0",
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1007": {
      "op": "uncover 2",
      "stack_out": [
        "anchor_app#0",
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%5#0",
        "tmp%2#0"
      ]
    },
    "1009": {
      "op": "concat",
      "defined_out": [
        "anchor_app#0",
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "1010": {
      "op": "swap",
      "stack_out": [
        "anchor_app#0",
        "encoded_tuple_buffer%6#0",
        "current_tail_offset%3#0"
      ]
    },
    "1011": {
      "op": "itob",
      "defined_out": [
        "anchor_app#0",
        "as_bytes%3#0",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "encoded_tuple_buffer%6#0",
        "as_bytes%3#0"
      ]
    },
    "1012": {
      "op": "extract 6 2",
      "defined_out": [
        "anchor_app#0",
        "encoded_tuple_buffer%6#0",
        "offset_as_uint16%3#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "encoded_tuple_buffer%6#0",
        "offset_as_uint16%3#0"
      ]
    },
    "1015": {
      "op": "concat",
      "defined_out": [
        "anchor_app#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1016": {
      "op": "frame_dig -3",
      "stack_out": [
        "anchor_app#0",
        "encoded_tuple_buffer%7#0",
        "id#0 (copy)"
      ]
    },
    "1018": {
      "op": "concat",
      "defined_out": [
        "anchor_app#0",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "1019": {
      "op": "frame_dig -2",
      "stack_out": [
        "anchor_app#0",
        "encoded_tuple_buffer%8#0",
        "name#0 (copy)"
      ]
    },
    "1021": {
      "op": "concat",
      "defined_out": [
        "anchor_app#0",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "1022": {
      "op": "frame_dig -1",
      "stack_out": [
        "anchor_app#0",
        "encoded_tuple_buffer%9#0",
        "metadata#0 (copy)"
      ]
    },
    "1024": {
      "op": "concat",
      "defined_out": [
        "anchor_app#0",
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "1025": {
      "op": "pushbytes base32(AAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)",
      "defined_out": [
        "AAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
        "anchor_app#0",
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "encoded_tuple_buffer%10#0",
        "AAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      ]
    },
    "1061": {
      "op": "concat",
      "defined_out": [
        "anchor_app#0",
        "profile#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "profile#0"
      ]
    },
    "1062": {
      "op": "bytec_0 // \"profilesById\"",
      "defined_out": [
        "\"profilesById\"",
        "anchor_app#0",
        "profile#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "profile#0",
        "\"profilesById\""
      ]
    },
    "1063": {
      "op": "frame_dig -3",
      "stack_out": [
        "anchor_app#0",
        "profile#0",
        "\"profilesById\"",
        "id#0 (copy)"
      ]
    },
    "1065": {
      "op": "concat",
      "defined_out": [
        "anchor_app#0",
        "profile#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "anchor_app#0",
        "profile#0",
        "tmp%4#0"
      ]
    },
    "1066": {
      "op": "dup",
      "defined_out": [
        "anchor_app#0",
        "profile#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "anchor_app#0",
        "profile#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "1067": {
      "op": "box_del",
      "defined_out": [
        "anchor_app#0",
        "profile#0",
        "tmp%4#0",
        "{box_del}"
      ],
      "stack_out": [
        "anchor_app#0",
        "profile#0",
        "tmp%4#0",
        "{box_del}"
      ]
    },
    "1068": {
      "op": "pop",
      "stack_out": [
        "anchor_app#0",
        "profile#0",
        "tmp%4#0"
      ]
    },
    "1069": {
      "op": "swap",
      "stack_out": [
        "anchor_app#0",
        "tmp%4#0",
        "profile#0"
      ]
    },
    "1070": {
      "op": "box_put",
      "stack_out": [
        "anchor_app#0"
      ]
    },
    "1071": {
      "retsub": true,
      "op": "retsub"
    },
    "1072": {
      "subroutine": "smart_contracts.registry.contract.Registry.addMember",
      "params": {
        "profileId#0": "bytes",
        "member#0": "bytes"
      },
      "block": "addMember",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1075": {
      "op": "bytec_0 // \"profilesById\"",
      "defined_out": [
        "\"profilesById\""
      ],
      "stack_out": [
        "\"profilesById\""
      ]
    },
    "1076": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"profilesById\"",
        "profileId#0 (copy)"
      ],
      "stack_out": [
        "\"profilesById\"",
        "profileId#0 (copy)"
      ]
    },
    "1078": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1079": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1080": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "profile#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "maybe_exists%0#0"
      ]
    },
    "1081": {
      "error": "check self.profilesById entry exists",
      "op": "assert // check self.profilesById entry exists",
      "stack_out": [
        "tmp%0#0",
        "profile#0"
      ]
    },
    "1082": {
      "op": "dup",
      "defined_out": [
        "profile#0",
        "profile#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "profile#0 (copy)"
      ]
    },
    "1083": {
      "op": "intc_2 // 54",
      "defined_out": [
        "54",
        "profile#0",
        "profile#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "profile#0 (copy)",
        "54"
      ]
    },
    "1084": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "profile#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_start_offset%0#0"
      ]
    },
    "1085": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_start_offset%0#0",
        "profile#0 (copy)"
      ]
    },
    "1087": {
      "op": "len",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "profile#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "1088": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "profile#0 (copy)"
      ]
    },
    "1090": {
      "op": "dig 2",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "item_start_offset%0#0 (copy)",
        "profile#0",
        "profile#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "profile#0 (copy)",
        "item_start_offset%0#0 (copy)"
      ]
    },
    "1092": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_start_offset%0#0",
        "profile#0 (copy)",
        "item_start_offset%0#0 (copy)",
        "item_end_offset%0#0"
      ]
    },
    "1094": {
      "op": "substring3",
      "defined_out": [
        "item_start_offset%0#0",
        "profile#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_start_offset%0#0",
        "tmp%1#0"
      ]
    },
    "1095": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "item_start_offset%0#0",
        "profile#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_start_offset%0#0",
        "expr_value_trimmed%0#0"
      ]
    },
    "1098": {
      "op": "frame_dig -1",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "item_start_offset%0#0",
        "member#0 (copy)",
        "profile#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_start_offset%0#0",
        "expr_value_trimmed%0#0",
        "member#0 (copy)"
      ]
    },
    "1100": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0",
        "item_start_offset%0#0",
        "profile#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_start_offset%0#0",
        "concatenated%0#0"
      ]
    },
    "1101": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)",
        "item_start_offset%0#0",
        "profile#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_start_offset%0#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "1102": {
      "op": "len",
      "defined_out": [
        "byte_len%0#0",
        "concatenated%0#0",
        "item_start_offset%0#0",
        "profile#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_start_offset%0#0",
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "1103": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "byte_len%0#0",
        "concatenated%0#0",
        "item_start_offset%0#0",
        "profile#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_start_offset%0#0",
        "concatenated%0#0",
        "byte_len%0#0",
        "32"
      ]
    },
    "1104": {
      "op": "/",
      "defined_out": [
        "concatenated%0#0",
        "item_start_offset%0#0",
        "len_%0#0",
        "profile#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_start_offset%0#0",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "1105": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0",
        "item_start_offset%0#0",
        "profile#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_start_offset%0#0",
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "1106": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "item_start_offset%0#0",
        "len_16_bit%0#0",
        "profile#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_start_offset%0#0",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "1109": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_start_offset%0#0",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "1110": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0",
        "item_start_offset%0#0",
        "profile#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_start_offset%0#0",
        "concat_result%0#0"
      ]
    },
    "1111": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "item_start_offset%0#0",
        "concat_result%0#0",
        "profile#0"
      ]
    },
    "1113": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "concat_result%0#0",
        "item_start_offset%0#0",
        "profile#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_start_offset%0#0",
        "concat_result%0#0",
        "profile#0",
        "0"
      ]
    },
    "1114": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "concat_result%0#0",
        "profile#0",
        "0",
        "item_start_offset%0#0"
      ]
    },
    "1116": {
      "op": "extract3",
      "defined_out": [
        "concat_result%0#0",
        "data_up_to_item%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "concat_result%0#0",
        "data_up_to_item%0#0"
      ]
    },
    "1117": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "data_up_to_item%0#0",
        "concat_result%0#0"
      ]
    },
    "1118": {
      "op": "concat",
      "stack_out": [
        "tmp%0#0",
        "profile#0"
      ]
    },
    "1119": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1121": {
      "op": "box_del",
      "defined_out": [
        "profile#0",
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "{box_del}"
      ]
    },
    "1122": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "profile#0"
      ]
    },
    "1123": {
      "op": "box_put",
      "stack_out": []
    },
    "1124": {
      "retsub": true,
      "op": "retsub"
    },
    "1125": {
      "subroutine": "smart_contracts.registry.contract.Registry.updateProfileName",
      "params": {
        "profileId#0": "bytes",
        "name#0": "bytes"
      },
      "block": "updateProfileName",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1128": {
      "op": "frame_dig -2",
      "defined_out": [
        "profileId#0 (copy)"
      ],
      "stack_out": [
        "profileId#0 (copy)"
      ]
    },
    "1130": {
      "callsub": "smart_contracts.registry.contract.Registry._onlyProfileOwner",
      "op": "callsub _onlyProfileOwner",
      "stack_out": []
    },
    "1133": {
      "op": "bytec_0 // \"profilesById\"",
      "defined_out": [
        "\"profilesById\""
      ],
      "stack_out": [
        "\"profilesById\""
      ]
    },
    "1134": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"profilesById\"",
        "profileId#0 (copy)"
      ]
    },
    "1136": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1137": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1138": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "profile#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "maybe_exists%0#0"
      ]
    },
    "1139": {
      "error": "check self.profilesById entry exists",
      "op": "assert // check self.profilesById entry exists",
      "stack_out": [
        "tmp%0#0",
        "profile#0"
      ]
    },
    "1140": {
      "op": "dup",
      "defined_out": [
        "profile#0",
        "profile#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "profile#0 (copy)"
      ]
    },
    "1141": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "profile#0",
        "profile#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "profile#0 (copy)",
        "10"
      ]
    },
    "1143": {
      "op": "extract_uint16",
      "defined_out": [
        "item_offset%0#0",
        "profile#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_offset%0#0"
      ]
    },
    "1144": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_offset%0#0",
        "profile#0 (copy)"
      ]
    },
    "1146": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "item_offset%0#0",
        "profile#0",
        "profile#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_offset%0#0",
        "profile#0 (copy)",
        "0"
      ]
    },
    "1147": {
      "op": "dig 2",
      "defined_out": [
        "0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "profile#0",
        "profile#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_offset%0#0",
        "profile#0 (copy)",
        "0",
        "item_offset%0#0 (copy)"
      ]
    },
    "1149": {
      "op": "extract3",
      "defined_out": [
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "profile#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_offset%0#0",
        "data_up_to_item%0#0"
      ]
    },
    "1150": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "profile#0 (copy)"
      ]
    },
    "1152": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "profile#0",
        "profile#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "profile#0 (copy)",
        "12"
      ]
    },
    "1154": {
      "op": "extract_uint16",
      "defined_out": [
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "profile#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0"
      ]
    },
    "1155": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "profile#0 (copy)"
      ]
    },
    "1157": {
      "op": "len",
      "defined_out": [
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "profile#0",
        "tmp%0#0",
        "total_data_length%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "total_data_length%0#0"
      ]
    },
    "1158": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "total_data_length%0#0",
        "profile#0"
      ]
    },
    "1160": {
      "op": "dig 2",
      "defined_out": [
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "next_item_offset%0#0 (copy)",
        "profile#0",
        "tmp%0#0",
        "total_data_length%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "total_data_length%0#0",
        "profile#0",
        "next_item_offset%0#0 (copy)"
      ]
    },
    "1162": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "profile#0",
        "next_item_offset%0#0 (copy)",
        "total_data_length%0#0"
      ]
    },
    "1164": {
      "op": "substring3",
      "defined_out": [
        "data_beyond_item%0#0",
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "data_beyond_item%0#0"
      ]
    },
    "1165": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "data_beyond_item%0#0",
        "data_up_to_item%0#0"
      ]
    },
    "1167": {
      "op": "frame_dig -1",
      "defined_out": [
        "data_beyond_item%0#0",
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "name#0 (copy)",
        "next_item_offset%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "data_beyond_item%0#0",
        "data_up_to_item%0#0",
        "name#0 (copy)"
      ]
    },
    "1169": {
      "op": "concat",
      "defined_out": [
        "data_beyond_item%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "tmp%0#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "data_beyond_item%0#0",
        "updated_data%0#0"
      ]
    },
    "1170": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "updated_data%0#0",
        "data_beyond_item%0#0"
      ]
    },
    "1171": {
      "op": "concat",
      "defined_out": [
        "item_offset%0#0",
        "next_item_offset%0#0",
        "tmp%0#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "updated_data%1#0"
      ]
    },
    "1172": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "item_offset%0#0",
        "updated_data%1#0",
        "next_item_offset%0#0"
      ]
    },
    "1173": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "updated_data%1#0",
        "next_item_offset%0#0",
        "item_offset%0#0"
      ]
    },
    "1175": {
      "op": "-",
      "defined_out": [
        "item_length%0#0",
        "tmp%0#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "updated_data%1#0",
        "item_length%0#0"
      ]
    },
    "1176": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "updated_data%1#0",
        "item_length%0#0",
        "name#0 (copy)"
      ]
    },
    "1178": {
      "op": "len",
      "defined_out": [
        "item_length%0#0",
        "new_value_length%0#0",
        "tmp%0#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "updated_data%1#0",
        "item_length%0#0",
        "new_value_length%0#0"
      ]
    },
    "1179": {
      "op": "dig 2",
      "defined_out": [
        "item_length%0#0",
        "new_value_length%0#0",
        "tmp%0#0",
        "updated_data%1#0",
        "updated_data%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "updated_data%1#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "updated_data%1#0 (copy)"
      ]
    },
    "1181": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "tmp%0#0",
        "updated_data%1#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "updated_data%1#0 (copy)",
        "12"
      ]
    },
    "1183": {
      "op": "extract_uint16",
      "defined_out": [
        "item_length%0#0",
        "new_value_length%0#0",
        "tail_offset%0#0",
        "tmp%0#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "updated_data%1#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "tail_offset%0#0"
      ]
    },
    "1184": {
      "op": "dig 1",
      "defined_out": [
        "item_length%0#0",
        "new_value_length%0#0",
        "new_value_length%0#0 (copy)",
        "tail_offset%0#0",
        "tmp%0#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "updated_data%1#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "tail_offset%0#0",
        "new_value_length%0#0 (copy)"
      ]
    },
    "1186": {
      "op": "+",
      "defined_out": [
        "item_length%0#0",
        "new_value_length%0#0",
        "tail_offset%1#0",
        "tmp%0#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "updated_data%1#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "tail_offset%1#0"
      ]
    },
    "1187": {
      "op": "dig 2",
      "defined_out": [
        "item_length%0#0",
        "item_length%0#0 (copy)",
        "new_value_length%0#0",
        "tail_offset%1#0",
        "tmp%0#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "updated_data%1#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "tail_offset%1#0",
        "item_length%0#0 (copy)"
      ]
    },
    "1189": {
      "op": "-",
      "defined_out": [
        "item_length%0#0",
        "new_value_length%0#0",
        "tail_offset%2#0",
        "tmp%0#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "updated_data%1#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "tail_offset%2#0"
      ]
    },
    "1190": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "tmp%0#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "updated_data%1#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "as_bytes%0#0"
      ]
    },
    "1191": {
      "op": "extract 6 2",
      "defined_out": [
        "item_length%0#0",
        "new_value_length%0#0",
        "tail_offset_bytes%0#0",
        "tmp%0#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "updated_data%1#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "tail_offset_bytes%0#0"
      ]
    },
    "1194": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "tail_offset_bytes%0#0",
        "updated_data%1#0"
      ]
    },
    "1196": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "updated_data%1#0",
        "tail_offset_bytes%0#0"
      ]
    },
    "1197": {
      "op": "replace2 12",
      "defined_out": [
        "item_length%0#0",
        "new_value_length%0#0",
        "tmp%0#0",
        "updated_data%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "updated_data%2#0"
      ]
    },
    "1199": {
      "op": "dup",
      "defined_out": [
        "item_length%0#0",
        "new_value_length%0#0",
        "tmp%0#0",
        "updated_data%2#0",
        "updated_data%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "updated_data%2#0",
        "updated_data%2#0 (copy)"
      ]
    },
    "1200": {
      "op": "intc_2 // 54",
      "defined_out": [
        "54",
        "item_length%0#0",
        "new_value_length%0#0",
        "tmp%0#0",
        "updated_data%2#0",
        "updated_data%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "updated_data%2#0",
        "updated_data%2#0 (copy)",
        "54"
      ]
    },
    "1201": {
      "op": "extract_uint16",
      "defined_out": [
        "item_length%0#0",
        "new_value_length%0#0",
        "tail_offset%3#0",
        "tmp%0#0",
        "updated_data%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "updated_data%2#0",
        "tail_offset%3#0"
      ]
    },
    "1202": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "item_length%0#0",
        "updated_data%2#0",
        "tail_offset%3#0",
        "new_value_length%0#0"
      ]
    },
    "1204": {
      "op": "+",
      "defined_out": [
        "item_length%0#0",
        "tail_offset%4#0",
        "tmp%0#0",
        "updated_data%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_length%0#0",
        "updated_data%2#0",
        "tail_offset%4#0"
      ]
    },
    "1205": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "updated_data%2#0",
        "tail_offset%4#0",
        "item_length%0#0"
      ]
    },
    "1207": {
      "op": "-",
      "defined_out": [
        "tail_offset%5#0",
        "tmp%0#0",
        "updated_data%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "updated_data%2#0",
        "tail_offset%5#0"
      ]
    },
    "1208": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "tmp%0#0",
        "updated_data%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "updated_data%2#0",
        "as_bytes%1#0"
      ]
    },
    "1209": {
      "op": "extract 6 2",
      "defined_out": [
        "tail_offset_bytes%1#0",
        "tmp%0#0",
        "updated_data%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "updated_data%2#0",
        "tail_offset_bytes%1#0"
      ]
    },
    "1212": {
      "op": "replace2 54",
      "stack_out": [
        "tmp%0#0",
        "profile#0"
      ]
    },
    "1214": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1216": {
      "op": "box_del",
      "defined_out": [
        "profile#0",
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "{box_del}"
      ]
    },
    "1217": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "profile#0"
      ]
    },
    "1218": {
      "op": "box_put",
      "stack_out": []
    },
    "1219": {
      "retsub": true,
      "op": "retsub"
    },
    "1220": {
      "subroutine": "smart_contracts.registry.contract.Registry._onlyProfileOwner",
      "params": {
        "profileId#0": "bytes"
      },
      "block": "_onlyProfileOwner",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1223": {
      "op": "bytec_0 // \"profilesById\"",
      "defined_out": [
        "\"profilesById\""
      ],
      "stack_out": [
        "\"profilesById\""
      ]
    },
    "1224": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"profilesById\"",
        "profileId#0 (copy)"
      ],
      "stack_out": [
        "\"profilesById\"",
        "profileId#0 (copy)"
      ]
    },
    "1226": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1227": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "profile#0"
      ],
      "stack_out": [
        "profile#0",
        "maybe_exists%0#0"
      ]
    },
    "1228": {
      "error": "check self.profilesById entry exists",
      "op": "assert // check self.profilesById entry exists",
      "stack_out": [
        "profile#0"
      ]
    },
    "1229": {
      "op": "extract 14 32 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1232": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1234": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1235": {
      "error": "Only the owner of the profile can call this function",
      "op": "assert // Only the owner of the profile can call this function",
      "stack_out": []
    },
    "1236": {
      "retsub": true,
      "op": "retsub"
    },
    "1237": {
      "subroutine": "smart_contracts.registry.contract.Registry.updateProfileMetadata",
      "params": {
        "profileId#0": "bytes",
        "metadata#0": "bytes"
      },
      "block": "updateProfileMetadata",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1240": {
      "op": "frame_dig -2",
      "defined_out": [
        "profileId#0 (copy)"
      ],
      "stack_out": [
        "profileId#0 (copy)"
      ]
    },
    "1242": {
      "callsub": "smart_contracts.registry.contract.Registry._onlyProfileOwner",
      "op": "callsub _onlyProfileOwner",
      "stack_out": []
    },
    "1245": {
      "op": "bytec_0 // \"profilesById\"",
      "defined_out": [
        "\"profilesById\""
      ],
      "stack_out": [
        "\"profilesById\""
      ]
    },
    "1246": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"profilesById\"",
        "profileId#0 (copy)"
      ]
    },
    "1248": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1249": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1250": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "profile#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "maybe_exists%0#0"
      ]
    },
    "1251": {
      "error": "check self.profilesById entry exists",
      "op": "assert // check self.profilesById entry exists",
      "stack_out": [
        "tmp%0#0",
        "profile#0"
      ]
    },
    "1252": {
      "op": "dup",
      "defined_out": [
        "profile#0",
        "profile#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "profile#0 (copy)"
      ]
    },
    "1253": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "profile#0",
        "profile#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "profile#0 (copy)",
        "12"
      ]
    },
    "1255": {
      "op": "extract_uint16",
      "defined_out": [
        "item_offset%0#0",
        "profile#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_offset%0#0"
      ]
    },
    "1256": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_offset%0#0",
        "profile#0 (copy)"
      ]
    },
    "1258": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "item_offset%0#0",
        "profile#0",
        "profile#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_offset%0#0",
        "profile#0 (copy)",
        "0"
      ]
    },
    "1259": {
      "op": "dig 2",
      "defined_out": [
        "0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "profile#0",
        "profile#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_offset%0#0",
        "profile#0 (copy)",
        "0",
        "item_offset%0#0 (copy)"
      ]
    },
    "1261": {
      "op": "extract3",
      "defined_out": [
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "profile#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_offset%0#0",
        "data_up_to_item%0#0"
      ]
    },
    "1262": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "profile#0 (copy)"
      ]
    },
    "1264": {
      "op": "intc_2 // 54",
      "defined_out": [
        "54",
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "profile#0",
        "profile#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "profile#0 (copy)",
        "54"
      ]
    },
    "1265": {
      "op": "extract_uint16",
      "defined_out": [
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "profile#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0"
      ]
    },
    "1266": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "profile#0 (copy)"
      ]
    },
    "1268": {
      "op": "len",
      "defined_out": [
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "profile#0",
        "tmp%0#0",
        "total_data_length%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "total_data_length%0#0"
      ]
    },
    "1269": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "total_data_length%0#0",
        "profile#0"
      ]
    },
    "1271": {
      "op": "dig 2",
      "defined_out": [
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "next_item_offset%0#0 (copy)",
        "profile#0",
        "tmp%0#0",
        "total_data_length%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "total_data_length%0#0",
        "profile#0",
        "next_item_offset%0#0 (copy)"
      ]
    },
    "1273": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "profile#0",
        "next_item_offset%0#0 (copy)",
        "total_data_length%0#0"
      ]
    },
    "1275": {
      "op": "substring3",
      "defined_out": [
        "data_beyond_item%0#0",
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "data_beyond_item%0#0"
      ]
    },
    "1276": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "data_beyond_item%0#0",
        "data_up_to_item%0#0"
      ]
    },
    "1278": {
      "op": "frame_dig -1",
      "defined_out": [
        "data_beyond_item%0#0",
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "metadata#0 (copy)",
        "next_item_offset%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "data_beyond_item%0#0",
        "data_up_to_item%0#0",
        "metadata#0 (copy)"
      ]
    },
    "1280": {
      "op": "concat",
      "defined_out": [
        "data_beyond_item%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "tmp%0#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "data_beyond_item%0#0",
        "updated_data%0#0"
      ]
    },
    "1281": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "updated_data%0#0",
        "data_beyond_item%0#0"
      ]
    },
    "1282": {
      "op": "concat",
      "defined_out": [
        "item_offset%0#0",
        "next_item_offset%0#0",
        "tmp%0#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "updated_data%1#0"
      ]
    },
    "1283": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "item_offset%0#0",
        "updated_data%1#0",
        "next_item_offset%0#0"
      ]
    },
    "1284": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "updated_data%1#0",
        "next_item_offset%0#0",
        "item_offset%0#0"
      ]
    },
    "1286": {
      "op": "-",
      "defined_out": [
        "item_length%0#0",
        "tmp%0#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "updated_data%1#0",
        "item_length%0#0"
      ]
    },
    "1287": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "updated_data%1#0",
        "item_length%0#0",
        "metadata#0 (copy)"
      ]
    },
    "1289": {
      "op": "len",
      "defined_out": [
        "item_length%0#0",
        "new_value_length%0#0",
        "tmp%0#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "updated_data%1#0",
        "item_length%0#0",
        "new_value_length%0#0"
      ]
    },
    "1290": {
      "op": "dig 2",
      "defined_out": [
        "item_length%0#0",
        "new_value_length%0#0",
        "tmp%0#0",
        "updated_data%1#0",
        "updated_data%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "updated_data%1#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "updated_data%1#0 (copy)"
      ]
    },
    "1292": {
      "op": "intc_2 // 54",
      "stack_out": [
        "tmp%0#0",
        "updated_data%1#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "updated_data%1#0 (copy)",
        "54"
      ]
    },
    "1293": {
      "op": "extract_uint16",
      "defined_out": [
        "item_length%0#0",
        "new_value_length%0#0",
        "tail_offset%0#0",
        "tmp%0#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "updated_data%1#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "tail_offset%0#0"
      ]
    },
    "1294": {
      "op": "+",
      "defined_out": [
        "item_length%0#0",
        "tail_offset%1#0",
        "tmp%0#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "updated_data%1#0",
        "item_length%0#0",
        "tail_offset%1#0"
      ]
    },
    "1295": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "updated_data%1#0",
        "tail_offset%1#0",
        "item_length%0#0"
      ]
    },
    "1296": {
      "op": "-",
      "defined_out": [
        "tail_offset%2#0",
        "tmp%0#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "updated_data%1#0",
        "tail_offset%2#0"
      ]
    },
    "1297": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "tmp%0#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "updated_data%1#0",
        "as_bytes%0#0"
      ]
    },
    "1298": {
      "op": "extract 6 2",
      "defined_out": [
        "tail_offset_bytes%0#0",
        "tmp%0#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "updated_data%1#0",
        "tail_offset_bytes%0#0"
      ]
    },
    "1301": {
      "op": "replace2 54",
      "stack_out": [
        "tmp%0#0",
        "profile#0"
      ]
    },
    "1303": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1305": {
      "op": "box_del",
      "defined_out": [
        "profile#0",
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "profile#0",
        "{box_del}"
      ]
    },
    "1306": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "profile#0"
      ]
    },
    "1307": {
      "op": "box_put",
      "stack_out": []
    },
    "1308": {
      "retsub": true,
      "op": "retsub"
    },
    "1309": {
      "subroutine": "smart_contracts.registry.contract.Registry.isOwnerOrMemberOfProfile",
      "params": {
        "profileId#0": "bytes",
        "address#0": "bytes"
      },
      "block": "isOwnerOrMemberOfProfile",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1312": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "isMember#5"
      ]
    },
    "1314": {
      "op": "bytec_0 // \"profilesById\"",
      "defined_out": [
        "\"profilesById\""
      ],
      "stack_out": [
        "isMember#5",
        "\"profilesById\""
      ]
    },
    "1315": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"profilesById\"",
        "profileId#0 (copy)"
      ],
      "stack_out": [
        "isMember#5",
        "\"profilesById\"",
        "profileId#0 (copy)"
      ]
    },
    "1317": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "isMember#5",
        "tmp%0#0"
      ]
    },
    "1318": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "profile#0"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "maybe_exists%0#0"
      ]
    },
    "1319": {
      "op": "swap",
      "stack_out": [
        "isMember#5",
        "maybe_exists%0#0",
        "profile#0"
      ]
    },
    "1320": {
      "op": "dup",
      "stack_out": [
        "isMember#5",
        "maybe_exists%0#0",
        "profile#0",
        "profile#0 (copy)"
      ]
    },
    "1321": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%0#0",
        "profile#0"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "profile#0",
        "maybe_exists%0#0"
      ]
    },
    "1323": {
      "error": "check self.profilesById entry exists",
      "op": "assert // check self.profilesById entry exists",
      "stack_out": [
        "isMember#5",
        "profile#0",
        "profile#0"
      ]
    },
    "1324": {
      "op": "dup",
      "defined_out": [
        "profile#0",
        "profile#0 (copy)"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "profile#0",
        "profile#0 (copy)"
      ]
    },
    "1325": {
      "op": "intc_2 // 54",
      "defined_out": [
        "54",
        "profile#0",
        "profile#0 (copy)"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "profile#0",
        "profile#0 (copy)",
        "54"
      ]
    },
    "1326": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "profile#0"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "profile#0",
        "item_start_offset%0#0"
      ]
    },
    "1327": {
      "op": "dig 1",
      "stack_out": [
        "isMember#5",
        "profile#0",
        "profile#0",
        "item_start_offset%0#0",
        "profile#0 (copy)"
      ]
    },
    "1329": {
      "op": "len",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "profile#0"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "profile#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "1330": {
      "op": "substring3",
      "defined_out": [
        "members#0",
        "profile#0"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0"
      ]
    },
    "1331": {
      "op": "dup",
      "defined_out": [
        "members#0",
        "profile#0"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "members#0"
      ]
    },
    "1332": {
      "op": "intc_1 // 0",
      "defined_out": [
        "isMember#0",
        "members#0",
        "profile#0"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "members#0",
        "isMember#0"
      ]
    },
    "1333": {
      "op": "swap",
      "defined_out": [
        "isMember#0",
        "members#0",
        "profile#0"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "members#0"
      ]
    },
    "1334": {
      "op": "intc_1 // 0",
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "members#0",
        "0"
      ]
    },
    "1335": {
      "op": "extract_uint16",
      "defined_out": [
        "array_length%0#0",
        "isMember#0",
        "members#0",
        "profile#0"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0"
      ]
    },
    "1336": {
      "op": "intc_1 // 0",
      "defined_out": [
        "array_length%0#0",
        "isMember#0",
        "item_index_internal%0#0",
        "members#0",
        "profile#0"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1337": {
      "block": "isOwnerOrMemberOfProfile_for_header@1",
      "stack_in": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1339": {
      "op": "frame_dig 4",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "array_length%0#0"
      ]
    },
    "1341": {
      "op": "<",
      "defined_out": [
        "array_length%0#0",
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "1342": {
      "op": "frame_dig 3",
      "defined_out": [
        "array_length%0#0",
        "continue_looping%0#0",
        "isMember#5",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "continue_looping%0#0",
        "isMember#5"
      ]
    },
    "1344": {
      "op": "frame_bury 0",
      "defined_out": [
        "array_length%0#0",
        "continue_looping%0#0",
        "isMember#5",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "1346": {
      "op": "bz isOwnerOrMemberOfProfile_after_for@6",
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1349": {
      "op": "frame_dig 2",
      "defined_out": [
        "array_length%0#0",
        "isMember#5",
        "item_index_internal%0#0",
        "members#0"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "members#0"
      ]
    },
    "1351": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "isMember#5",
        "item_index_internal%0#0",
        "members#0"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1354": {
      "op": "frame_dig 5",
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1356": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "isMember#5",
        "item_index_internal%0#0",
        "members#0"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0",
        "32"
      ]
    },
    "1357": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "isMember#5",
        "item_index_internal%0#0",
        "item_offset%0#0",
        "members#0"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "1358": {
      "op": "intc_3 // 32",
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "32"
      ]
    },
    "1359": {
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "array_length%0#0",
        "isMember#5",
        "item_index_internal%0#0",
        "member#0",
        "members#0"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "member#0"
      ]
    },
    "1360": {
      "op": "frame_dig -1",
      "defined_out": [
        "address#0 (copy)",
        "array_length%0#0",
        "isMember#5",
        "item_index_internal%0#0",
        "member#0",
        "members#0"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "member#0",
        "address#0 (copy)"
      ]
    },
    "1362": {
      "op": "==",
      "defined_out": [
        "array_length%0#0",
        "isMember#5",
        "item_index_internal%0#0",
        "members#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%2#0"
      ]
    },
    "1363": {
      "op": "bz isOwnerOrMemberOfProfile_after_if_else@4",
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1366": {
      "op": "intc_0 // 1",
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "isMember#5"
      ]
    },
    "1367": {
      "op": "frame_bury 0",
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1369": {
      "op": "b isOwnerOrMemberOfProfile_after_for@6"
    },
    "1372": {
      "block": "isOwnerOrMemberOfProfile_after_if_else@4",
      "stack_in": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1374": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "1375": {
      "op": "+",
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1376": {
      "op": "frame_bury 5",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1378": {
      "op": "b isOwnerOrMemberOfProfile_for_header@1"
    },
    "1381": {
      "block": "isOwnerOrMemberOfProfile_after_for@6",
      "stack_in": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "isMember#0"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "isMember#0"
      ]
    },
    "1383": {
      "op": "frame_dig 1",
      "defined_out": [
        "isMember#0",
        "profile#0"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "isMember#0",
        "profile#0"
      ]
    },
    "1385": {
      "op": "extract 14 32 // on error: Index access is out of bounds",
      "defined_out": [
        "isMember#0",
        "profile#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "isMember#0",
        "tmp%3#0"
      ]
    },
    "1388": {
      "op": "frame_dig -1",
      "defined_out": [
        "address#0 (copy)",
        "isMember#0",
        "profile#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "isMember#0",
        "tmp%3#0",
        "address#0 (copy)"
      ]
    },
    "1390": {
      "op": "==",
      "defined_out": [
        "isMember#0",
        "profile#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "isMember#0",
        "tmp%4#0"
      ]
    },
    "1391": {
      "op": "||",
      "defined_out": [
        "isMember#0",
        "profile#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "isMember#5",
        "profile#0",
        "members#0",
        "isMember#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%5#0"
      ]
    },
    "1392": {
      "op": "frame_bury 0"
    },
    "1394": {
      "retsub": true,
      "op": "retsub"
    }
  }
}